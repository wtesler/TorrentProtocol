#include "TorrentNode.h"
#include "TorrentNodeList.h"
#include "Constants.h"

#pragma once
class Manager {

private:

    TorrentNodeList * list;
    char * catVideo;
    MPI_Request * sendRequest, * recvRequest;
    MPI_Status  * sendStatus, * recvStatus;

public:

    Manager() {

        //Just a bunch of randomly generated byte data.
        catVideo = new char[MOVIE_SIZE_IN_BYTES];
        for (unsigned int i = 0; i < MOVIE_SIZE_IN_BYTES; i++) {
            // rand actually is psuedo-random, but it gets the job done.
            catVideo[i] = rand() % CHAR_MAX;
        }

        // Organizes the video into prioritized chunks
        list = new TorrentNodeList(catVideo, MOVIE_SIZE_IN_BYTES, CHUNK_SIZE_IN_BYTES);
    }

    ~Manager() {
        delete catVideo;
        delete list;
    }

    bool isSendComplete(){
        if (sendRequest != nullptr) {
            int * flag;
            MPI_Test(sendRequest, flag, sendStatus);
            return flag;
        } else {
            return true;
        }
    }

    // Warning! : Must check isSendComplete() before calling this method
    void send(int dest, int tag) {
        MPI_Ibsend(catVideo, CHUNK_SIZE_IN_BYTES, MPI_CHAR, dest, tag, MPI_COMM_WORLD, sendRequest);
    }

    void receive() {
        int * chunkNum;
        MPI_Irecv(chunkNum, 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, recvRequest);
        int source = recvStatus->MPI_SOURCE;
    }

};

